{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\milad\\\\Desktop\\\\MSA\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\milad\\\\desktop\\\\msa\\\\my-app\\\\src\\\\components\\\\EmotionAnalysis.js\";\nimport React from 'react';\nimport { useState } from 'react';\nimport MyWebcam from './MyWebcam';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Alert from 'react-bootstrap/Alert';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Draggable from 'react-draggable';\n\nfunction EmotionAnalysis() {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        result = _useState2[0],\n        updateResult = _useState2[1];\n\n  return React.createElement(Draggable, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(MyWebcam, {\n    onReceivedResult: updateResult,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), React.createElement(Result, {\n    result: result,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  })));\n}\n\nfunction getProgressBarColour(percent) {\n  var variant = \"\";\n\n  if (percent <= 50) {\n    variant = \"success\";\n  } else if (percent <= 90) {\n    variant = \"warning\";\n  } else {\n    variant = \"danger\";\n  }\n\n  return variant;\n}\n\nfunction Result(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(Col, {\n    xs: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, props.result < 100 ? props.result + '%' : React.createElement(GameOver, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })), React.createElement(ProgressBar, {\n    animated: true,\n    now: props.result,\n    variant: getProgressBarColour(props.result),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })), React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }))));\n}\n\nfunction GameOver() {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Alert, {\n    variant: \"danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Alert.Heading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Game Over!\")));\n}\n\nexport default EmotionAnalysis;","map":{"version":3,"sources":["C:\\Users\\milad\\desktop\\msa\\my-app\\src\\components\\EmotionAnalysis.js"],"names":["React","useState","MyWebcam","ProgressBar","Alert","Container","Row","Col","Draggable","EmotionAnalysis","result","updateResult","getProgressBarColour","percent","variant","Result","props","GameOver"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,SAAQC,SAAR,EAAmBC,GAAnB,EAAwBC,GAAxB,QAAkC,iBAAlC;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;AAGA,SAASC,eAAT,GAA2B;AAAA,oBACQR,QAAQ,CAAC,CAAD,CADhB;AAAA;AAAA,QAChBS,MADgB;AAAA,QACRC,YADQ;;AAEvB,SACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACD,oBAAC,QAAD;AAAU,IAAA,gBAAgB,EAAEA,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,EAED,oBAAC,MAAD;AAAQ,IAAA,MAAM,EAAED,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFC,CADL,CADJ;AASH;;AAED,SAASE,oBAAT,CAA8BC,OAA9B,EAAuC;AACnC,MAAIC,OAAO,GAAG,EAAd;;AACI,MAAID,OAAO,IAAI,EAAf,EAAmB;AACfC,IAAAA,OAAO,GAAG,SAAV;AACH,GAFD,MAEO,IAAID,OAAO,IAAI,EAAf,EAAmB;AACtBC,IAAAA,OAAO,GAAG,SAAV;AACH,GAFM,MAEA;AACHA,IAAAA,OAAO,GAAG,QAAV;AACH;;AACD,SAAOA,OAAP;AACH;;AAEL,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACnB,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAK,CAACN,MAAN,GAAe,GAAf,GAAqBM,KAAK,CAACN,MAAN,GAAe,GAApC,GAA0C,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA/C,CADJ,EAEI,oBAAC,WAAD;AAAa,IAAA,QAAQ,MAArB;AAAsB,IAAA,GAAG,EAAEM,KAAK,CAACN,MAAjC;AAAyC,IAAA,OAAO,EAAEE,oBAAoB,CAACI,KAAK,CAACN,MAAP,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,EAMI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADJ,CADJ,CADJ;AAeH;;AAID,SAASO,QAAT,GAAoB;AAChB,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CADJ,CADJ;AAOH;;AAGD,eAAeR,eAAf","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport MyWebcam from './MyWebcam'\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Alert from 'react-bootstrap/Alert'\nimport {Container, Row, Col} from 'react-bootstrap';\nimport Draggable from 'react-draggable';\n\n\nfunction EmotionAnalysis() {\n    const [result, updateResult] = useState(0);\n    return (\n        <Draggable>\n             <div>\n            <MyWebcam onReceivedResult={updateResult}/>\n            <Result result={result} />\n        </div>\n        </Draggable>\n       \n    );\n}\n\nfunction getProgressBarColour(percent) {\n    var variant = \"\";\n        if (percent <= 50) {\n            variant = \"success\";\n        } else if (percent <= 90) {\n            variant = \"warning\";\n        } else {\n            variant = \"danger\";\n        }\n        return variant;\n    }\n\nfunction Result(props) {\n    return (\n        <div>\n            <Container>\n                <Row>\n                    <Col />\n                    <Col xs={10}>\n                        <h1>{props.result < 100 ? props.result + '%' : <GameOver />}</h1>\n                        <ProgressBar animated now={props.result} variant={getProgressBarColour(props.result)} />\n                    </Col>\n                    <Col />\n                </Row>\n            </Container>\n\n        </div>\n    );\n}\n\n\n\nfunction GameOver() {\n    return (\n        <div>\n            <Alert variant=\"danger\">\n                <Alert.Heading>Game Over!</Alert.Heading>\n            </Alert>\n        </div>\n    );\n}\n\n\nexport default EmotionAnalysis;"]},"metadata":{},"sourceType":"module"}